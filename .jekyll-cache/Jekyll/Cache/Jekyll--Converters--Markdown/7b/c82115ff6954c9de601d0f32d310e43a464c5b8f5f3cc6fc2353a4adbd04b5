I"Å<h3 id="keda">Keda</h3>

<p>KEDA is a Kubernetes-based Event Driven Autoscaler. With KEDA, you can drive the scaling of any container in Kubernetes based on the number of events needing to be processed.</p>

<p>KEDA is a single-purpose and lightweight component that can be added into any Kubernetes cluster. KEDA works alongside standard Kubernetes components like the Horizontal Pod Autoscaler and can extend functionality without overwriting or duplication. With KEDA you can explicitly map the apps you want to use event-driven scale, with other apps continuing to function. This makes KEDA a flexible and safe option to run alongside any number of any other Kubernetes applications or frameworks.</p>

<h3 id="how-keda-works">How KEDA works</h3>

<p>KEDA performs two key roles within Kubernetes:</p>

<ul>
  <li>
    <p>Agent â€” KEDA activates and deactivates Kubernetes Deployments to scale to and from zero on no events. This is one of the primary roles of the keda-operator container that runs when you install KEDA.</p>
  </li>
  <li>
    <p>Metrics â€” KEDA acts as a Kubernetes metrics server that exposes rich event data like queue length or stream lag to the Horizontal Pod Autoscaler to drive scale out. It is up to the Deployment to consume the events directly from the source. This preserves rich event integration and enables gestures like completing or abandoning queue messages to work out of the box. The metric serving is the primary role of the keda-operator-metrics-apiserver container that runs when you install KEDA.</p>
  </li>
</ul>

<h3 id="architecture">Architecture</h3>

<p><img src="/images/keda-arch.png" alt="_config.yml" /></p>

<p><img src="/images/keda-scaler_list_18_07_2022.png" alt="_config.yml" />
For the current scaler list: <a href="https://keda.sh">keda.sh</a></p>

<h3 id="keda-installation">Keda Installation</h3>

<p>Deploying KEDA with Helm is very simple:</p>

<ol>
  <li>
    <p>Add Helm repo</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> helm repo add kedacore https://kedacore.github.io/charts
 helm repo update
    
</code></pre></div>    </div>
  </li>
  <li>
    <p>Define namespace and Install keda Helm chart</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">#define namespace </span>
 kubectl create namespace keda
    
 <span class="c">#Install  keda Helm chart</span>
 helm <span class="nb">install </span>keda kedacore/keda <span class="nt">--namespace</span> keda <span class="nt">--debug</span>
</code></pre></div>    </div>
  </li>
  <li>Check Deployment
    <ul>
      <li>
        <p>You can view the KEDA operator pod via kubectl:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>kubectl get pods <span class="nt">-n</span> keda
  NAME                                               READY   STATUS    RESTARTS   AGE
  keda-operator-7879dcd589-fb9x8                     1/1     Running   0          17d
  keda-operator-metrics-apiserver-54746f8fdc-bsrlh   1/1     Running   0          17d
</code></pre></div>        </div>
      </li>
      <li>
        <p>You can view the logs for the keda operator container with the following:</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  kubectl logs <span class="nt">-n</span> keda keda-operator-7879dcd589-fb9x8 <span class="nt">-c</span> keda-operator
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Sample Keda Yaml</li>
</ol>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">keda.sh/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ScaledObject</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">v2-ingress-requests</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">scaleTargetRef</span><span class="pi">:</span>
    <span class="na">kind</span><span class="pi">:</span>          <span class="s">Deployment</span>                       <span class="c1"># Optional. Default: Deployment</span>
    <span class="na">name</span><span class="pi">:</span>          <span class="s">hello-world-two</span>                  <span class="c1"># Mandatory. Must be in the same namespace as the ScaledObject</span>
  <span class="na">pollingInterval</span><span class="pi">:</span>  <span class="m">15</span>                              <span class="c1"># Optional. Default: 30 seconds</span>
  <span class="na">cooldownPeriod</span><span class="pi">:</span>   <span class="m">30</span>                              <span class="c1"># Optional. Default: 300 seconds</span>
  <span class="na">minReplicaCount</span><span class="pi">:</span>  <span class="m">1</span>                               <span class="c1"># Optional. Default: 0</span>
  <span class="na">maxReplicaCount</span><span class="pi">:</span>  <span class="m">5</span>                               <span class="c1"># Optional. Default: 100</span>
  <span class="na">triggers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">prometheus</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">serverAddress</span><span class="pi">:</span> <span class="s">http://prometheus-server.prometheus.svc</span>
      <span class="na">metricName</span><span class="pi">:</span> <span class="s">nginx_ingress_controller_requests</span>
      <span class="na">threshold</span><span class="pi">:</span> <span class="s1">'</span><span class="s">5'</span>
      <span class="na">query</span><span class="pi">:</span> <span class="s">sum(rate(nginx_ingress_controller_requests{path="/v2"}[2m]))</span>
</code></pre></div></div>

:ET